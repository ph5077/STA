create_clock -period 5.0 [get_ports CK1]
  ## The source_object is where the clock exists
  ## usually an input port but can also be a pin inside the design.

report_transitive_fanout
  ## transitive fanout of the clock source object
  
report_transitive_fanin
  ## shows the successive driver and load pins in the path feeding into the sink object
  
set_propagated_clock [get_clocks CLK]
  ## enable calculation of propagated delay through the network using wire parasitic data
  ## propagate clock network delays, automatically determine latency at each reg clock pin

remove_clock
  ## remove a defined clock
  
reset_design 
  ## removes all clocks as well as other design information.
  
  
### Multiple clock
### Sync
create_clock -period 2 -name CK1 [get_ports CKP1]
create_generated_clock -name CK2 \
   -source [get_ports CKP1] \
   -divide_by 2 [get_pins U1/Q]

report_interclock_relation
  ## info about the common clock period for paths btw regs driven by different clocks
  
  ## To declare clocks that are not synchronous
  use one of the following way:
    case analysis
    set_clock_groups -logically_exclusive
    set_false_path

### Async
create_clock -period 2 -name CK1 [get_ports CKP1]
create_clock -period 6 -name CK2 [get_pins OSC/OUT]
set_clock_groups -asynchronous -group {CK1} -group {CK2}
  ## like set_false_path
  
  
### EXCLUSIVE, CK1, CK2 to a MUX
create_clock -period 2 -name CK1 [get_ports CKP1]
create_clock -period 8 -name CK2 [get_ports CKP2]
set_clock_groups -logically_exclusive -group {CK1} -group {CK2}
set_clock_groups -logically_exclusive -group {CK1 CK2} -group {CK3 CK4}
  ## multi group possible
set_clock_groups -logically_exclusive -group {CK1 CK2}
  ## just one group, the group is exclusive wrt to all other clks in the design

set_clock_groups -logically_exclusive -name EX1 -group {CK1 CK2} -group {CK3 CK4}
remove_clock_groups -logically_exclusive EX1
  ## clk group name EX1
  ## remove a clock EX1
  
set_clock_groups -physically_exclusive -group {CLK1} -group {CLK2}
  ## ignores any crosstalk btw the nets
  ## suppressing the logical checking btw the clk
  
  
report_clock -groups
  ## find out the clock groups set
  
report_path_group
  ## info about the current set of path groups
  ## group_path to set Weight and Critical Range
      ...
                              Critical
      Group Name    Weight    Range
      ----------------------------------------------------------------------
      **default**     1.00    0.00
      PCI_CLK         1.00    0.00
      SDRAM_CLK       1.00    0.00
      SD_DDR_CLK      1.00    0.00
      SYS_CLK         1.00    0.00

  
#########  unate   #####################################################
    "unate"         : the clk signal arriving at the reg clk pin
    “positive unate": non-inv path
    "negative unate": inverter path

    "not unate": if the clock sense is ambiguous as a result of non-unate timing arcs in the clock path.
    EX, XOR gate is not unate. could be either pos or neg unate, depending on the other input of XOR

set_sense -positive -clocks [get_clocks CLK] [get_pins xor1.z]
    specify the sense of a clk signal at a point 


=========================================================
create_generated_clock 
  要指定源時鐘(master clock)的 master_pin
  CTS時，默認會去balance這兩個時鐘(即generated clock 和 master clock)，讓skew儘可能小
  在計算generated clock的clock latency時，會把從master clock pin 到generated clock pin之間的delay也考慮在內
  report_timing，通過選項-path_type full_clock_expanded可以將master clock的部分也展開
  
  report_timing -path_type full_clock
  report_timing -path_type full_clock_expanded

=========================================================  
同一點定義多個generated clock
=========================================================  
CLK ------------------A
      |___FFdiv2------B --- Y ----FFdiv3 ----------
      |___FFdiv4------C
=========================================================  
      
  同一個時鐘，與經過二分頻，四分頻後的時鐘經過MUX輸出
  MUX輸出點定義三個時鐘CLKbypass/CLKdiv2/CLKdiv4，
  三個時鐘是physically_exclusive
  定義時鐘：
  create_clock -period 10 CLK
  create_generated_clock -name CLKbypass \
    -source [get_ports CLK] \
    -master CLK \
    -divide_by 1 \
    -combinational \
    -add \
    UMAX/Y
    
  create_generated_clock -name CLKdiv2 \
    -source FFdiv2/CK \
    -master CLK \
    -divide_by 2 \
    -combinational \
    -add \
    UMAX/Y
 
 create_generated_clock -name CLKdiv4 \
    -source FFdiv4/CK \
    -master CLK \
    -divide_by 4 \
    -combinational \
    -add \
    UMAX/Y
    
  set_clock_groups -physically_exclusive \
    -group {CLKbypass } \
    -group {CLKdiv2} \
    -group {CLKdiv4}
    
    
==========================================================================
create parent clock
  > create_clock -period 10 CLK

create divide-by-2, divide-by-4 generated clocks
  > create_generated_clock -name CLKdiv2 -divide_by 2 FFdiv2/Q -source FFdiv2/CK
  > create_generated_clock -name CLKdiv4 -divide_by 4 FFdiv4/Q -source FFdiv4/CK

create “MUXed” versions of all clocks arriving at MUX
  > create_generated_clock -name CLK_mux -combinational UMUX/A -source UMUX/A
  > create_generated_clock -name CLKdiv2_mux -combinational UMUX/B -source UMUX/B  
  > create_generated_clock -name CLKdiv4_mux -combinational UMUX/C -source UMUX/C

create divide-by-3 versions of all clocks arriving at FFdiv3
  > create_generated_clock -name CLK_mux_div3
    -divide_by 3 FFdiv3/Q -source FFdiv3/CK -master CLK_mux -add
  > create_generated_clock -name CLKdiv2_mux_div3
    -divide_by 3 FFdiv3/Q -source FFdiv3/CK -master CLKdiv2_mux -add
  > create_generated_clock -name CLKdiv4_mux_div3
    -divide_by 3 FFdiv3/Q -source FFdiv3/CK -master CLKdiv4_mux -add

apply physical exclusivity to all clock families (generated clocks included)
which are exclusive due to statically switched MUX
  > set_clock_groups -physically_exclusive
    -group {CLK_mux CLK_mux_div3}
    -group {CLKdiv2_mux CLKdiv2_mux_div3}
    -group {CLKdiv4_mux CLKdiv4_mux_div3}

https://blog.csdn.net/m0_49540263/article/details/115008408
